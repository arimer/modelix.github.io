<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modelix â€“ Modelix Documenation</title>
    <link>/docs/</link>
    <description>Recent content in Modelix Documenation on Modelix</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Hello Entities</title>
      <link>/docs/examples/hello-entities/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/hello-entities/</guid>
      <description>
        
        
        &lt;p&gt;Open the entities sample as explained on the &lt;a href=&#34;/docs/examples/&#34;&gt;samples&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;This sample uses a custom notation for entities designed for the web. To this end, it uses a new notation definition language. It is defined in the &lt;code&gt;web&lt;/code&gt; aspect of the &lt;code&gt;org.modelix.samples.entities&lt;/code&gt; language. If you open this aspect, you will find a &lt;code&gt;Notation&lt;/code&gt; module. Double click to edit. Here is the URL to this node: http://127.0.0.1:63320/node?ref=r%3Ac375c783-4874-43af-8c53-f088cba95e74%28org.modelix.samples.entities.web%29%2F7759120791677832452&lt;/p&gt;
&lt;h2 id=&#34;changing-a-keyword&#34;&gt;Changing a keyword&lt;/h2&gt;
&lt;p&gt;The simplest possible change is modifying the keyword of an &lt;code&gt;Entity&lt;/code&gt;. Currently it is &amp;ldquo;entity&amp;rdquo;, change it to something else. Rebuild the language by pressing &lt;code&gt;Ctrl-F9&lt;/code&gt;, move over to the browser and reload the entities page. The keyword should change. This is the fundamental turnaround of modifying languages.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-public-flag&#34;&gt;Adding a &lt;code&gt;public&lt;/code&gt; flag&lt;/h2&gt;
&lt;p&gt;A possible extension of the entities language is to be able to mark properties as &lt;code&gt;public&lt;/code&gt;, optionally. If you look in the notation definition at the initializer of the &lt;code&gt;Property&lt;/code&gt;, then you will see that the notation language includes many ideas from the grammar cells extension for MPS. It also has direct support for flags where a particular keyword is shown if the flag is true and nothing otherwise.&lt;/p&gt;
&lt;p&gt;To add the &lt;code&gt;public&lt;/code&gt; flag, first go to the &lt;code&gt;Structure&lt;/code&gt; aspect of the language at at a Boolean &lt;code&gt;public&lt;/code&gt; property to the concept &lt;code&gt;Property&lt;/code&gt;. Notice that this is of course the normal MPS structure aspect, modelix does not change that. You can now go back to the notation, press &lt;code&gt;Shift-Enter&lt;/code&gt; on the name of the property, press &lt;code&gt;control-space&lt;/code&gt;, select the &lt;code&gt;flag&lt;/code&gt; cell, and finally select the &lt;code&gt;public&lt;/code&gt; property:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notation Property : [ flag/public name : type ? [ = initializer ] ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Rebuilding the language and reloading the page will make the flag available to the end-user.&lt;/p&gt;
&lt;h2 id=&#34;the-stuff-around-the-editor&#34;&gt;The Stuff around the editor&lt;/h2&gt;
&lt;p&gt;If you play with the samples and tutorial, you will see various HTML pages &amp;ldquo;around&amp;rdquo; the core node editor. These pages are obviously also served by the web server that runs in MPS (&lt;code&gt;localhost:3333&lt;/code&gt;). The pages are created through incremental transformations based on the Shadow Models framework. If you check out the &lt;code&gt;web&lt;/code&gt; aspect of the &lt;code&gt;org.modelix.samples.entities&lt;/code&gt; you can see two more relevant constructs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;HttpPage&lt;/code&gt; roots effectively define http endpoints. It defines a URL incl. parameters, a page title as well as the HTML page that is shown; that page is created via a transformation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http page /entities/model?model=... {
  path: /entities/model
  parameters: model : node&amp;lt;Model&amp;gt;
  title: &amp;quot;Entities (&amp;quot; + model.name + &amp;quot;)&amp;quot;
  transformation: call EntitiesWebPages.entitiesPage model
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This transformation is located in &lt;code&gt;EntitiesWebPages&lt;/code&gt;, an root that contains shadow model transformations. It builds the AST of a HTML page using concepts (defined as part of the modelix project) that represent HTML. Ultimately this HTML embeds the actual editor for an MPS node (&lt;code&gt;call pages.nodeEditor _ &lt;/code&gt;). How this then exactly works will be explained later.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
